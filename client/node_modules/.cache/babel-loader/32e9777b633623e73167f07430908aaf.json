{"ast":null,"code":"import store from './store';\nimport watch from 'redux-watch';\nimport { get } from 'lodash'; // use redux-watch to subscribe to a certain store value\n// and use the callback to set the initial value\n\nconst subscribe = (path, callback) => {\n  store.subscribe(watch(store.getState, path)(callback));\n  callback(get(store.getState(), path));\n};\n\nexport function subscribeCSynth(synth) {\n  subscribe('synth1UI.amp.attack', synth.setAmpAttack);\n  subscribe('synth1UI.amp.decay', synth.setAmpDecay);\n  subscribe('synth1UI.amp.sustain', synth.setAmpSustain);\n  subscribe('synth1UI.amp.release', synth.setAmpRelease);\n  subscribe('synth1UI.filter.attack', synth.setFilterAttack);\n  subscribe('synth1UI.filter.decay', synth.setFilterDecay);\n  subscribe('synth1UI.filter.sustain', synth.setFilterSustain);\n  subscribe('synth1UI.filter.release', synth.setFilterRelease);\n  subscribe('synth1UI.filter.base', synth.setFilterBase);\n  subscribe('synth1UI.filter.range', synth.setFilterRange);\n  subscribe('synth1UI.filter.q', synth.setFilterQ);\n}","map":{"version":3,"sources":["/Users/lucas/fall-2019/capstone/continuum-app/client/src/redux/subscriptions.js"],"names":["store","watch","get","subscribe","path","callback","getState","subscribeCSynth","synth","setAmpAttack","setAmpDecay","setAmpSustain","setAmpRelease","setFilterAttack","setFilterDecay","setFilterSustain","setFilterRelease","setFilterBase","setFilterRange","setFilterQ"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,GAAR,QAAkB,QAAlB,C,CAEA;AACA;;AACA,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACpCL,EAAAA,KAAK,CAACG,SAAN,CAAgBF,KAAK,CAACD,KAAK,CAACM,QAAP,EAAiBF,IAAjB,CAAL,CAA4BC,QAA5B,CAAhB;AACAA,EAAAA,QAAQ,CAACH,GAAG,CAACF,KAAK,CAACM,QAAN,EAAD,EAAmBF,IAAnB,CAAJ,CAAR;AACD,CAHD;;AAKA,OAAO,SAASG,eAAT,CAAyBC,KAAzB,EAAgC;AACrCL,EAAAA,SAAS,CAAC,qBAAD,EAAwBK,KAAK,CAACC,YAA9B,CAAT;AACAN,EAAAA,SAAS,CAAC,oBAAD,EAAuBK,KAAK,CAACE,WAA7B,CAAT;AACAP,EAAAA,SAAS,CAAC,sBAAD,EAAyBK,KAAK,CAACG,aAA/B,CAAT;AACAR,EAAAA,SAAS,CAAC,sBAAD,EAAyBK,KAAK,CAACI,aAA/B,CAAT;AAEAT,EAAAA,SAAS,CAAC,wBAAD,EAA2BK,KAAK,CAACK,eAAjC,CAAT;AACAV,EAAAA,SAAS,CAAC,uBAAD,EAA0BK,KAAK,CAACM,cAAhC,CAAT;AACAX,EAAAA,SAAS,CAAC,yBAAD,EAA4BK,KAAK,CAACO,gBAAlC,CAAT;AACAZ,EAAAA,SAAS,CAAC,yBAAD,EAA4BK,KAAK,CAACQ,gBAAlC,CAAT;AACAb,EAAAA,SAAS,CAAC,sBAAD,EAAyBK,KAAK,CAACS,aAA/B,CAAT;AACAd,EAAAA,SAAS,CAAC,uBAAD,EAA0BK,KAAK,CAACU,cAAhC,CAAT;AACAf,EAAAA,SAAS,CAAC,mBAAD,EAAsBK,KAAK,CAACW,UAA5B,CAAT;AAED","sourcesContent":["import store from './store';\nimport watch from 'redux-watch';\nimport {get} from 'lodash';\n\n// use redux-watch to subscribe to a certain store value\n// and use the callback to set the initial value\nconst subscribe = (path, callback) => {\n  store.subscribe(watch(store.getState, path)(callback));\n  callback(get(store.getState(), path));\n}\n\nexport function subscribeCSynth(synth) {\n  subscribe('synth1UI.amp.attack', synth.setAmpAttack);\n  subscribe('synth1UI.amp.decay', synth.setAmpDecay);\n  subscribe('synth1UI.amp.sustain', synth.setAmpSustain);\n  subscribe('synth1UI.amp.release', synth.setAmpRelease);\n\n  subscribe('synth1UI.filter.attack', synth.setFilterAttack);\n  subscribe('synth1UI.filter.decay', synth.setFilterDecay);\n  subscribe('synth1UI.filter.sustain', synth.setFilterSustain);\n  subscribe('synth1UI.filter.release', synth.setFilterRelease);\n  subscribe('synth1UI.filter.base', synth.setFilterBase);\n  subscribe('synth1UI.filter.range', synth.setFilterRange);\n  subscribe('synth1UI.filter.q', synth.setFilterQ);\n\n}"]},"metadata":{},"sourceType":"module"}