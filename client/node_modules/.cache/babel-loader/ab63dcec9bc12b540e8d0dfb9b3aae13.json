{"ast":null,"code":"import _slicedToArray from \"/Users/lucas/fall-2019/capstone/continuum-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lucas/fall-2019/capstone/continuum-app/client/src/components/App.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Synth1 from './Synth1/Synth1';\nimport Tone from 'tone';\nimport startAudioContext from 'startaudiocontext';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport makeStore from 'continuum-shared/redux/store';\nimport { createLogger } from 'redux-logger';\nimport { createEmitter } from '../socket/socketEmitter';\nconst logger = createLogger({\n  collapsed: true\n});\nconst store = makeStore([createEmitter(), logger]);\n\nconst App = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isPlaying = _useState2[0],\n        setPlaying = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        audioContextStarted = _useState4[0],\n        setAudioContextStarted = _useState4[1]; // runs once after first render\n\n\n  useEffect(() => {\n    startAudioContext(Tone.context).then(() => {\n      setAudioContextStarted(true);\n    });\n  }, []);\n  return !audioContextStarted ? 'Click' : React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    id: \"play-button\",\n    onClick: () => setPlaying(!isPlaying),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, isPlaying ? 'Stop' : 'Play'), React.createElement(Synth1, {\n    isPlaying: isPlaying,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/lucas/fall-2019/capstone/continuum-app/client/src/components/App.jsx"],"names":["React","useState","useEffect","Synth1","Tone","startAudioContext","Provider","makeStore","createLogger","createEmitter","logger","collapsed","store","App","isPlaying","setPlaying","audioContextStarted","setAudioContextStarted","context","then"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,iBAAP,MAA8B,mBAA9B;AACA,OAAO,WAAP;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,SAAQC,YAAR,QAA2B,cAA3B;AACA,SAAQC,aAAR,QAA4B,yBAA5B;AAEA,MAAMC,MAAM,GAAGF,YAAY,CAAC;AAC1BG,EAAAA,SAAS,EAAE;AADe,CAAD,CAA3B;AAGA,MAAMC,KAAK,GAAGL,SAAS,CAAC,CAACE,aAAa,EAAd,EAAkBC,MAAlB,CAAD,CAAvB;;AAEA,MAAMG,GAAG,GAAG,MAAM;AAAA,oBACgBZ,QAAQ,CAAC,KAAD,CADxB;AAAA;AAAA,QACTa,SADS;AAAA,QACEC,UADF;;AAAA,qBAEsCd,QAAQ,CAAC,KAAD,CAF9C;AAAA;AAAA,QAETe,mBAFS;AAAA,QAEYC,sBAFZ,kBAIhB;;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,iBAAiB,CAACD,IAAI,CAACc,OAAN,CAAjB,CAAgCC,IAAhC,CAAqC,MAAM;AACzCF,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,CAACD,mBAAD,GAAuB,OAAvB,GACL,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEJ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,EAAE,EAAC,aAAX;AACE,IAAA,OAAO,EAAE,MAAMG,UAAU,CAAC,CAACD,SAAF,CAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGA,SAAS,GAAG,MAAH,GAAY,MAHxB,CADF,EAME,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEA,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CArBD;;AAuBA,eAAeD,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Synth1 from './Synth1/Synth1';\nimport Tone from 'tone';\nimport startAudioContext from 'startaudiocontext';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport makeStore from 'continuum-shared/redux/store';\nimport {createLogger} from 'redux-logger';\nimport {createEmitter} from '../socket/socketEmitter';\n\nconst logger = createLogger({\n  collapsed: true\n});\nconst store = makeStore([createEmitter(), logger]);\n\nconst App = () => {\n  const [isPlaying, setPlaying] = useState(false);\n  const [audioContextStarted, setAudioContextStarted] = useState(false);\n\n  // runs once after first render\n  useEffect(() => {\n    startAudioContext(Tone.context).then(() => {\n      setAudioContextStarted(true);\n    });\n  }, []);\n\n  return !audioContextStarted ? 'Click' : (\n    <Provider store={store}>\n      <button id='play-button'\n        onClick={() => setPlaying(!isPlaying)}\n      >\n        {isPlaying ? 'Stop' : 'Play'}\n      </button>\n      <Synth1 isPlaying={isPlaying} />\n    </Provider>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}