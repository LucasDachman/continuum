{"ast":null,"code":"import Tone from 'tone';\nexport default class CSynth {\n  constructor(bpm) {\n    this._loopCallback = time => {\n      this._onTick(time, this.step);\n\n      const nextChord = this._nextNotes().map(note => note + this.frequencyOffset * 10); // console.log('next chord:', nextChord)\n\n\n      nextChord.length > 0 && this.synth.triggerAttackRelease(nextChord, '16n', time);\n    };\n\n    this.addNote = ({\n      index,\n      freq\n    }) => {\n      const chord = this.chords[index];\n\n      if (!chord.includes(freq)) {\n        chord.push(freq);\n      }\n    };\n\n    this.removeNote = ({\n      index,\n      freq\n    }) => {\n      this.chords[index] = this.chords[index].filter(value => value !== freq);\n    };\n\n    this.triggerAttack = frequency => {\n      this.synth.triggerAttack(frequency);\n    };\n\n    this.triggerRelease = frequency => {\n      this.synth.triggerRelease(frequency);\n    };\n\n    this.setAmpAttack = ratio => {\n      this.synth.set({\n        envelope: {\n          attack: ratio + 0.01\n        }\n      });\n    };\n\n    this.setAmpDecay = ratio => {\n      this.synth.set({\n        envelope: {\n          decay: ratio + 0.01\n        }\n      });\n    };\n\n    this.setAmpSustain = ratio => {\n      this.synth.set({\n        envelope: {\n          sustain: ratio\n        }\n      });\n    };\n\n    this.setAmpRelease = ratio => {\n      this.synth.set({\n        envelope: {\n          release: ratio * 10 + 0.01\n        }\n      });\n    };\n\n    this.setFilterAttack = ratio => {\n      this.synth.set({\n        filterEnvelope: {\n          attack: ratio / 5 + 0.01\n        }\n      });\n    };\n\n    this.setFilterDecay = ratio => {\n      this.synth.set({\n        filterEnvelope: {\n          decay: ratio + 0.01\n        }\n      });\n    };\n\n    this.setFilterSustain = ratio => {\n      this.synth.set({\n        filterEnvelope: {\n          sustain: ratio\n        }\n      });\n    };\n\n    this.setFilterRelease = ratio => {\n      this.synth.set({\n        filterEnvelope: {\n          release: ratio * 100 + 0.01\n        }\n      });\n    };\n\n    this.setFilterBase = ratio => {\n      this.synth.set({\n        filterEnvelope: {\n          baseFrequency: ratio * 500 + 1\n        }\n      });\n    };\n\n    this.setFilterRange = ratio => {\n      this.synth.set({\n        filterEnvelope: {\n          octaves: ratio * 20\n        }\n      });\n    };\n\n    this.setFilterQ = ratio => {\n      this.synth.set({\n        filter: {\n          Q: ratio * 10\n        }\n      });\n    };\n\n    this.start = () => {\n      Tone.context.resume(); // Tone.Transport.start();\n\n      this.loop.start();\n    };\n\n    this.stop = () => {\n      // Tone.Transport.stop();\n      this.loop.stop();\n      this.step = 0;\n    };\n\n    // this.loop.humanize = true;\n    Tone.Transport.bpm.value = bpm;\n    Tone.Transport.start();\n    this.synth = new Tone.PolySynth(6, Tone.MonoSynth).toMaster();\n    this.synth.set({\n      oscillator: {\n        type: 'sawtooth'\n      }\n    });\n    this.chords = new Array(16).fill(null).map(v => []);\n    this.step = 0;\n    this.frequencyOffset = 0;\n    this.loop = new Tone.Loop(this._loopCallback, '16n');\n  }\n\n  _onTick(time, step) {\n    if (!this.onTick) return;\n    Tone.Draw.schedule(() => {\n      this.onTick(step);\n    }, time + 0.1);\n  }\n\n  _nextNotes() {\n    let nextChord = this.chords[this.step] || [];\n    this.step++;\n    if (this.step >= this.chords.length) this.step = 0;\n    return nextChord;\n  }\n\n}","map":{"version":3,"sources":["/Users/lucas/fall-2019/capstone/continuum-app/client/src/audio/CSynth.js"],"names":["Tone","CSynth","constructor","bpm","_loopCallback","time","_onTick","step","nextChord","_nextNotes","map","note","frequencyOffset","length","synth","triggerAttackRelease","addNote","index","freq","chord","chords","includes","push","removeNote","filter","value","triggerAttack","frequency","triggerRelease","setAmpAttack","ratio","set","envelope","attack","setAmpDecay","decay","setAmpSustain","sustain","setAmpRelease","release","setFilterAttack","filterEnvelope","setFilterDecay","setFilterSustain","setFilterRelease","setFilterBase","baseFrequency","setFilterRange","octaves","setFilterQ","Q","start","context","resume","loop","stop","Transport","PolySynth","MonoSynth","toMaster","oscillator","type","Array","fill","v","Loop","onTick","Draw","schedule"],"mappings":"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","sourcesContent":["import Tone from 'tone';\n\nexport default class CSynth {\n  constructor(bpm) {\n    // this.loop.humanize = true;\n    Tone.Transport.bpm.value = bpm;\n    Tone.Transport.start();\n\n    this.synth = new Tone.PolySynth(6, Tone.MonoSynth).toMaster();\n    this.synth.set({\n      oscillator: {\n        type: 'sawtooth'\n      },\n    });\n    this.chords = new Array(16)\n      .fill(null).map(v => []);\n    this.step = 0;\n    this.frequencyOffset = 0;\n    this.loop = new Tone.Loop(this._loopCallback, '16n')\n  }\n\n  _loopCallback = (time) => {\n    this._onTick(time, this.step);\n    const nextChord = this._nextNotes().map(note => note + this.frequencyOffset * 10);\n    // console.log('next chord:', nextChord)\n    nextChord.length > 0 &&\n      this.synth.triggerAttackRelease(nextChord, '16n', time);\n  }\n\n  _onTick(time, step) {\n    if (!this.onTick) return;\n    Tone.Draw.schedule(() => {\n      this.onTick(step);\n    }, time + 0.1)\n  }\n\n  _nextNotes() {\n    let nextChord = this.chords[this.step] || [];\n    this.step++;\n    if (this.step >= this.chords.length) this.step = 0;\n    return nextChord;\n  }\n\n  addNote = ({ index, freq }) => {\n    const chord = this.chords[index];\n    if (!chord.includes(freq)) {\n      chord.push(freq);\n    }\n  }\n\n  removeNote = ({ index, freq }) => {\n    this.chords[index] = this.chords[index].filter(value => value !== freq);\n  }\n\n  triggerAttack = (frequency) => {\n    this.synth.triggerAttack(frequency);\n  }\n\n  triggerRelease = (frequency) => {\n    this.synth.triggerRelease(frequency);\n  }\n\n  setAmpAttack = (ratio) => {\n    this.synth.set({\n      envelope: {\n        attack: ratio + 0.01\n      }\n    });\n  }\n\n  setAmpDecay = (ratio) => {\n    this.synth.set({\n      envelope: {\n        decay: ratio + 0.01\n      }\n    });\n  }\n\n  setAmpSustain = (ratio) => {\n    this.synth.set({\n      envelope: {\n        sustain: ratio\n      }\n    });\n  }\n\n  setAmpRelease = (ratio) => {\n    this.synth.set({\n      envelope: {\n        release: (ratio * 10) + 0.01\n      }\n    });\n  }\n\n  setFilterAttack = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        attack: (ratio / 5) + 0.01\n      }\n    });\n  }\n\n  setFilterDecay = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        decay: ratio + 0.01\n      }\n    });\n  }\n\n  setFilterSustain = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        sustain: ratio\n      }\n    });\n  }\n\n  setFilterRelease = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        release: (ratio * 100) + 0.01\n      }\n    });\n  }\n\n  setFilterBase = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        baseFrequency: (ratio * 500) + 1\n      }\n    });\n  }\n\n  setFilterRange = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        octaves: ratio * 20\n      }\n    });\n  }\n\n  setFilterQ = (ratio) => {\n    this.synth.set({\n      filter: {\n        Q: ratio * 10\n      }\n    })\n  }\n\n  start = () => {\n    Tone.context.resume();\n    // Tone.Transport.start();\n    this.loop.start();\n  }\n\n  stop = () => {\n    // Tone.Transport.stop();\n    this.loop.stop();\n    this.step = 0;\n  }\n}"]},"metadata":{},"sourceType":"module"}