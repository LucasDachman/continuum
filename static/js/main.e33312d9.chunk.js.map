{"version":3,"sources":["util/notes-util.js","redux/config-creators/compositionReducerConfig.js","BassSynth/bassReducer.js","components/util/DialIndicator.jsx","components/util/Dial.jsx","BassSynth/BassSynth.jsx","redux/reducers/synth1Reducer.js","LennySynth/lennyReducer.js","components/piano-roll/Cell.jsx","components/piano-roll/PianoRoll.jsx","Drummer/drummerReducer.js","components/piano-roll/DrumCell.jsx","components/piano-roll/DrumSequencer.jsx","LennySynth/LennySynth.jsx","Drummer/Drummer.jsx","components/App.jsx","audio/CSynth.js","BassSynth/BassSynthAudio.js","redux/subscriptions.js","redux/reducers/utilReducer.js","redux/reducers/characterReducer.js","redux/store.js","socket/configureSocket.js","audio/Sequence.js","audio/Sequencer.js","LennySynth/LennySynthAudio.js","util/util.js","Drummer/DrummerAudio.js","index.js","audio-files/kicks/kick_02.wav","audio-files/snares/snare_01.wav","audio-files/rims/rim_01.wav","audio-files/shaker_snaps/shaker_snap_01.wav","audio-files/claps/clap_01.wav","audio-files/short_cymbals/short_cymbal_01.wav","audio-files/long_cymbals/long_cymbal_01.wav"],"names":["midiToNote","noteNumber","freq","Tone","Frequency","name","toNote","frequency","toFrequency","color","includes","midi","octaveNotes","notes","scale","map","toMidi","createCompositionSliceConfig","initialState","range","i","active","note","keyIndex","reducers","setCompositionCell","state","action","payload","row","col","composition","toggleCompositionCell","transpose","semitones","cell","compositionReducerConfig","bassSlice","createSlice","slice","length","shape","filter","decay","q","setLength","setShape","setFilterDecay","setFilterRange","setFilterQ","actions","DialIndicator","strokeWidth","stroke","useCircularInputContext","getPointFromValue","center","x","y","ref","useRef","useCircularDrag","x1","y1","x2","y2","cx","cy","r","opacity","memo","value","onChange","children","disabled","handleChange","useCallback","throttle","v","mainColor","className","radius","strokeLinecap","style","zIndex","mapDispatch","connect","bass","filterDecay","filterRange","filterQ","currentCharacter","character","synth1Slice","amp","attack","sustain","release","base","setAmp","Object","entries","key","setFilter","lennySlice","reverb","phaser","vibratoDepth","setReverb","setPhaser","setVibratoDepth","toggleActions","synth1","toggle1","toggleBass","lenny","toggleLenny","playing","dispatch","useDispatch","useSelector","handleClick","e","stopPropagation","Boolean","cells","onClick","_","cn","PianoRoll","currentStep","n","rowNum","colNum","files","kick","snare","rim","shakerSnap","clap","shortCymbal","longCymbal","path","match","index","String","compositionSliceConfig","drummerSlice","filterFreq","setFilterFreq","toggleDrummer","drummer","isDrummer","DrumSequencer","drumFiles","DrumCell","mapDispatchToProps","type","checked","target","useState","isPlaying","setPlaying","setCurrentStep","tonic","setTonic","setScale","handleTonicChange","handleScaleChange","useEffect","sequencer","onTick","step","id","context","resume","CSynth","triggerAttack","synth","triggerRelease","triggerAttackRelease","time","setAmpAttack","ratio","set","envelope","setAmpDecay","setAmpSustain","setAmpRelease","setFilterAttack","filterEnvelope","setFilterSustain","setFilterRelease","setFilterBase","baseFrequency","octaves","Q","Error","this","PolySynth","MonoSynth","chain","Limiter","Master","volume","oscillator","BassSynthAudio","detune","subscribe","store","callback","watch","getState","get","subscribeCSynth","synthName","subscribeBassSynth","subscribeLennySynth","subscribeDrummer","subscribeSequencer","sequence","rowi","coli","raw","addNote","removeNote","sequences","utilSlice","message","startTime","nextInterval","setMessage","console","log","setStartTime","setNextInterval","characterSlice","setCharacter","makeStore","middleware","configureStore","reducer","synth1Reducer","bassReducer","lennyReducer","drummerReducer","util","utilReducer","characterReducer","getDefaultMiddleware","preloadedState","blackList","makeActionEmitter","socket","next","result","origin","emit","makeStoreWithSocket","a","io","process","transports","Promise","resolve","on","config","actionEmitter","cb","charactersById","Sequence","numSteps","chords","frequencyOffset","chord","push","Array","fill","Sequencer","bpm","loop","_loopCallback","_onTick","values","seq","nextChord","getNotes","createSequence","start","stop","Transport","Loop","humanize","onLoop","Draw","schedule","Date","now","LennySynthAudio","in_min","out_min","roomSize","wet","vibrato","depth","Freeverb","Vibrato","Phaser","stages","DrummerAudio","forEach","urls","restart","Math","pow","reduce","acc","file","Filter","Players","Volume","document","getElementById","innerHTML","startAudioContext","setTimeout","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.e33312d9.chunk.js","sourcesContent":["import Tone from 'tone';\n\n/**\n * https://pages.mtu.edu/~suits/west_scales.html\n * https://www.musicnotes.com/now/tips/circle-of-fifths-guide/\n * https://github.com/tonaljs/tonal/blob/master/packages/scale-dictionary/data.ts\n */\n\n// helper functions\nexport function isBlack(note) {\n  return note.color === 'black';\n}\n\nexport function isWhite(note) {\n  return note.color === 'white'\n}\n\nexport function generateNotes(startNote = 0, endNote = 127) {\n  if (startNote < 0 || endNote > 127) {\n    console.error('note out of range');\n    return;\n  }\n\n  let notes = new Array(endNote - startNote).fill(0).map((_, i) => i + startNote);\n  notes = notes.map(midiToNote);\n  return notes;\n}\n\nexport const midiToNote = noteNumber => {\n  const freq = Tone.Frequency(noteNumber, 'midi');\n  const name = freq.toNote();\n  return {\n    name,\n    frequency: freq.toFrequency(),\n    color: name.includes('#') ? 'black' : 'white',\n    midi: noteNumber\n  }\n}\n\nexport const nameToNote = name => {\n  const freq = Tone.Frequency(name, 'note');\n  return {\n    name,\n    frequency: freq.toFrequency(),\n    color: name.includes('#') ? 'black' : 'white',\n    midi: freq.toMidi()\n  }\n}\n\nexport const octaveNotes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n","\nimport { midiToNote, nameToNote } from '../../util/notes-util';\nimport { scale } from '@tonaljs/scale';\nimport { range } from 'lodash';\n\nexport const numNotes = 14;\nexport const numSteps = 16;\nexport const startNote = 36;\n// export const notes = generateNotes(startNote, startNote + numNotes);\n\nexport const notes = [...scale('B3 minor').notes, ...scale('B4 minor').notes].map(nameToNote);\n\nexport const createCompositionSliceConfig = () => ({\n  initialState: range(numNotes)\n    .map(i =>\n      range(numSteps)\n        .map(() => ({\n          active: false,\n          note: notes[i],\n          keyIndex: i\n        }))\n    ),\n  reducers: {\n    setCompositionCell(state, action) {\n      const { row, col, active } = action.payload;\n      state.composition[row][col].active = active;\n    },\n    toggleCompositionCell(state, action) {\n      const { row, col } = action.payload;\n      state.composition[row][col].active = !state.composition[row][col].active;\n    },\n    transpose(state, action) {\n      const { semitones } = action.payload;\n      state.composition = state.composition\n        .map(row => row.map(cell => midiToNote(cell.midi + semitones)));\n    }\n  }\n});","import { createSlice } from 'redux-starter-kit';\nimport { createCompositionSliceConfig } from '../redux/config-creators/compositionReducerConfig';\n\nconst compositionReducerConfig = createCompositionSliceConfig();\n\nconst bassSlice = createSlice({\n  slice: 'bass',\n  initialState: {\n    length: 0.07,\n    shape: 0,\n    filter: {\n      decay: 0.5,\n      range: 0.3769,\n      q: 0.1,\n    },\n    composition: compositionReducerConfig.initialState\n  },\n  reducers: {\n    ...compositionReducerConfig.reducers,\n    setLength(state, action) {\n      state.length = action.payload;\n    },\n    setShape(state, action) {\n      state.shape = action.payload;\n    },\n    setFilterDecay(state, action) {\n      state.filter.decay = action.payload;\n    },\n    setFilterRange(state, action) {\n      state.filter.range = action.payload;\n    },\n    setFilterQ(state, action) {\n      state.filter.q = action.payload;\n    },\n  }\n});\n\nexport const {\n  setCompositionCell,\n  toggleCompositionCell,\n  setLength,\n  setShape,\n  setFilterDecay,\n  setFilterRange,\n  setFilterQ,\n} = bassSlice.actions;\nexport default bassSlice.reducer;","import React, { useRef } from 'react';\nimport {\n  useCircularInputContext,\n  useCircularDrag\n} from 'react-circular-input'\n\nconst DialIndicator = ({strokeWidth, stroke}) => {\n  const { getPointFromValue, center } = useCircularInputContext()\n  const { x, y,  } = getPointFromValue()\n\n  const ref = useRef(null)\n  useCircularDrag(ref)\n\n  return <g>\n    <line x1={center.x} y1={center.y} x2={x} y2={y} stroke={stroke} strokeWidth={strokeWidth}/>\n    {/* <line x1={center.x} y1={center.y} x2={x} y2={y} stroke='white' strokeOpacity={0} strokeWidth={6}/> */}\n    <circle ref={ref} cx={x} cy={y} r={20} stroke='white' opacity={0}/>\n  </g> \n\n}\n\nexport default DialIndicator;","import React, { memo, useCallback } from 'react';\nimport { throttle } from 'lodash';\n\nimport {\n  CircularInput,\n  CircularTrack,\n  CircularProgress,\n} from 'react-circular-input';\nimport DialIndicator from './DialIndicator';\n\nconst Dial = ({ value, onChange, children, disabled }) => {\n\n  const handleChange = useCallback(throttle(v => {\n    onChange(v)\n  }, 100), [onChange])\n\n  const mainColor = disabled ? 'lightgray' : 'black'\n\n  return (\n    <div className='knob'>\n      <div>\n        <CircularInput radius={21}\n          value={value}\n          onChange={disabled ? () => {} : handleChange}>\n          <CircularTrack stroke='lightgray' strokeWidth={1} strokeLinecap='square'/>\n          <CircularProgress stroke={mainColor} strokeWidth={2}  strokeLinecap='square'/>\n          <DialIndicator strokeWidth={2} stroke={mainColor}/>\n        </CircularInput>\n      </div>\n      <div style={{ color: mainColor, zIndex: -1 }}>{children}</div>\n    </div>\n  );\n}\n\nexport default memo(Dial);","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  setCompositionCell,\n  setLength,\n  setShape,\n  setFilterDecay,\n  setFilterRange,\n  setFilterQ\n} from './bassReducer';\nimport Dial from '../components/util/Dial';\n\nconst mapDispatch = {\n  setCompositionCell,\n  setLength,\n  setShape,\n  setFilterDecay,\n  setFilterRange,\n  setFilterQ\n};\n\nconst mapStateToProps = state => ({\n  length: state.bass.length,\n  shape: state.bass.shape,\n  filterDecay: state.bass.filter.decay,\n  filterRange: state.bass.filter.range,\n  filterQ: state.bass.filter.q,\n  currentCharacter: state.character.character\n});\n\nconst BassSynth = ({\n  setLength,\n  setShape,\n  setFilterDecay,\n  setFilterRange,\n  setFilterQ,\n  length,\n  shape,\n  filterDecay,\n  filterRange,\n  filterQ,\n  currentCharacter\n}) => {\n\n  const disabled = currentCharacter !== 'bass';\n  // actual render code\n  return (\n    <div className={`bass-synth synth ${disabled ? '' : 'current'} `}>\n      <h2>Bass</h2>\n      <div className='knob-row'>\n        <Dial\n          disabled={disabled}\n          value={length}\n          onChange={setLength} >\n          Length\n        </Dial>\n        <Dial\n          disabled={disabled}\n          value={shape}\n          onChange={setShape} >\n          Shape\n        </Dial>\n        <Dial\n          disabled={disabled}\n          value={filterDecay}\n          onChange={setFilterDecay} >\n          Decay\n        </Dial>\n        <Dial\n          disabled={disabled}\n          value={filterRange}\n          onChange={setFilterRange} >\n          Brightness\n        </Dial>\n        <Dial\n          disabled={disabled}\n          value={filterQ}\n          onChange={setFilterQ} >\n          Harshness\n        </Dial>\n      </div>\n    </div >\n  );\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatch\n)(BassSynth);\n","import { createSlice } from 'redux-starter-kit';\nimport { createCompositionSliceConfig } from '../config-creators/compositionReducerConfig';\n\nconst compositionReducerConfig = createCompositionSliceConfig();\n\nconst synth1Slice = createSlice({\n  slice: 'synth1',\n  initialState: {\n    amp: {\n      attack: 0,\n      decay: 0.5,\n      sustain: 1,\n      release: 0.2\n    },\n    filter: {\n      attack: 0,\n      decay: 0.5,\n      sustain: 1,\n      release: 0.2,\n      base: 0,\n      range: 0.5,\n      q: 0,\n    },\n    composition: compositionReducerConfig.initialState\n  },\n  reducers: {\n    setAmp(state, action) {\n      // allow for setting arbitrary values\n      for (let [key, value] of Object.entries(action.payload)) {\n        state.amp[key] = value;\n      }\n    },\n    setFilter(state, action) {\n      // allow for setting arbitrary values\n      for (let [key, value] of Object.entries(action.payload)) {\n        state.filter[key] = value;\n      }\n    },\n    ...compositionReducerConfig.reducers\n  }\n});\n\nexport const { setAmp, setFilter, setCompositionCell, toggleCompositionCell } = synth1Slice.actions;\nexport default synth1Slice.reducer;","import { createSlice } from 'redux-starter-kit';\nimport { createCompositionSliceConfig } from '../redux/config-creators/compositionReducerConfig';\n\nconst compositionReducerConfig = createCompositionSliceConfig();\n\nconst lennySlice = createSlice({\n  slice: 'lenny',\n  initialState: {\n    reverb: 0,\n    length: 0.25,\n    phaser: false,\n    vibratoDepth: 0.1,\n    composition: compositionReducerConfig.initialState\n  },\n  reducers: {\n    ...compositionReducerConfig.reducers,\n    setReverb(state, action) {\n      state.reverb = action.payload;\n    },\n    setLength(state, action) {\n      state.length = action.payload;\n    },\n    setPhaser(state, action) {\n      state.phaser = action.payload; \n    },\n    setVibratoDepth(state, action) {\n      state.vibratoDepth = action.payload;\n    }\n  }\n});\n\nexport const {\n  setCompositionCell,\n  toggleCompositionCell,\n  setReverb,\n  setLength,\n  setPhaser,\n  setVibratoDepth\n} = lennySlice.actions\nexport default lennySlice.reducer;\n\n","import React, { useCallback, memo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleCompositionCell as toggle1 } from '../../redux/reducers/synth1Reducer';\nimport { toggleCompositionCell as toggleBass } from '../../BassSynth/bassReducer';\nimport { toggleCompositionCell as toggleLenny } from '../../LennySynth/lennyReducer';\nimport _ from 'lodash'\nimport './cell.css';\n\nconst toggleActions = {\n  synth1: toggle1,\n  bass: toggleBass,\n  lenny: toggleLenny,\n};\n\nconst Cell = ({ row, col, playing }) => {\n  const dispatch = useDispatch();\n\n  const currentCharacter = useSelector(state => state.character.character);\n\n  const handleClick = useCallback((e) => {\n    e.stopPropagation();\n    Boolean(toggleActions[currentCharacter]) &&\n      dispatch(toggleActions[currentCharacter]({ row, col }));\n  }, [row, col, currentCharacter, dispatch]);\n\n  const cells = {\n    synth1: useSelector(state => state.synth1.composition[row][col]),\n    bass: useSelector(state => state.bass.composition[row][col]),\n    lenny: useSelector(state => state.lenny.composition[row][col]),\n  };\n\n  const className = currentCharacter in cells ? 'piano-cell clickable' : 'piano-cell';\n\n  return (\n    <span className={className} onClick={handleClick} >\n      {\n        _.map(cells, (cell, character) => {\n          if (!cell.active) return;\n          const cn = 'cell-trigger ' +\n            `cell-trigger-${character} ` +\n            `${playing ? 'playing' : ''} ` +\n            `${currentCharacter === character ? 'current' : ''} `\n          return <span\n            key={character}\n            onClick={handleClick}\n            className={cn}\n          />\n        })\n      }\n    </span>\n  );\n}\n\nexport default memo(Cell);","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport Cell from './Cell';\nimport { isBlack } from '../../util/notes-util';\nimport { notes, numSteps } from '../../redux/config-creators/compositionReducerConfig';\nimport { range } from 'lodash';\nimport './piano-roll.css';\n\nconst PianoRollKeys = () => (\n  <section className='piano-roll-keys'>\n    {notes.map((n, i) => {\n      const className = ['piano-key', isBlack(n) ? 'black' : 'white'].join(' ');\n      return (\n        <div\n          className={className}\n          key={n.name}>\n          <p>{n.name}</p>\n        </div>\n      );\n    })}\n  </section>\n);\n\nconst PianoRoll = ({ currentStep }) => {\n  const currentCharacter = useSelector(state => state.character.character);\n  return (\n    <div className={`piano-roll ${currentCharacter}`}>\n      <section className='piano-roll-editor'>\n        {\n          notes.map((n, rowNum) =>\n            <section key={n.name} className={'step-row'}>\n              {\n                range(numSteps).map(colNum =>\n                  <Cell key={colNum} row={rowNum} col={colNum} playing={currentStep === colNum} />\n                )\n              }\n            </section>\n          )\n        }\n      </section>\n    </div>\n  );\n}\n\nexport default PianoRoll;\n","import { createSlice } from 'redux-starter-kit';\nimport { createCompositionSliceConfig } from '../redux/config-creators/compositionReducerConfig';\n\nimport kick from '../audio-files/kicks/kick_02.wav';\nimport snare from '../audio-files/snares/snare_01.wav'\nimport rim from '../audio-files/rims/rim_01.wav';\nimport shakerSnap from '../audio-files/shaker_snaps/shaker_snap_01.wav';\nimport clap from '../audio-files/claps/clap_01.wav';\nimport shortCymbal from '../audio-files/short_cymbals/short_cymbal_01.wav';\nimport longCymbal from '../audio-files/long_cymbals/long_cymbal_01.wav';\n\nconst files = [kick, snare, rim, shakerSnap, clap, shortCymbal, longCymbal]\n  .map((path, i) => ({\n    path,\n    name: path.match(/\\w*_\\d\\d(?=\\.)/)[0] || 'default',\n    index: String(i)\n  }));\n\n// const kicksContext = require.context('../audio-files/kicks/', true, /01\\.wav$/);\n// const snaresContext = require.context('../audio-files/snares', true, /01\\.wav$/);\n// const rimsContext = require.context('../audio-files/rims', true, /01\\.wav$/);\n// const shakerSnapsContext = require.context('../audio-files/shaker_snaps', true, /01\\.wav$/);\n// const clapsContext = require.context('../audio-files/claps', true, /01\\.wav$/);\n// const shortCymbalsContext = require.context('../audio-files/short_cymbals', true, /01\\.wav$/);\n// const longCymbalsContext = require.context('../audio-files/long_cymbals', true, /01\\.wav$/);\n\n// resolve file paths\n// for (let [key, context] of Object.entries(files)) {\n//   files[key] = context.keys().map(k => {\n//     const file = context(k)\n//     const name = file.match(/\\w*_\\d\\d(?=\\.)/)[0] || 'default';\n//     return { file, name };\n//   });\n// }\n\nconst compositionSliceConfig = createCompositionSliceConfig();\n\nconst drummerSlice = createSlice({\n  slice: 'drummer',\n  initialState: {\n    files,\n    filterFreq: 1,\n    composition: compositionSliceConfig.initialState,\n  },\n  reducers: {\n    ...compositionSliceConfig.reducers,\n    setFilterFreq(state, action) {\n      state.filterFreq = action.payload;\n    }\n  }\n});\n\nexport const {\n  setCompositionCell,\n  toggleCompositionCell,\n  setFilterFreq\n} = drummerSlice.actions;\nexport default drummerSlice.reducer;","import React, { useCallback, memo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleCompositionCell as toggleDrummer } from '../../Drummer/drummerReducer';\nimport './cell.css';\n\n\nconst Cell = ({ row, col, playing }) => {\n  const dispatch = useDispatch();\n  const currentCharacter = useSelector(state => state.character.character);\n\n  const handleClick = useCallback(e => {\n    e.stopPropagation();\n    currentCharacter === 'drummer' &&\n      dispatch(toggleDrummer({ row, col }));\n  }, [row, col, dispatch, currentCharacter]);\n\n  const cell = useSelector(state => state.drummer.composition[row][col]);\n  const isDrummer = currentCharacter === 'drummer';\n  const className =  isDrummer ? 'piano-cell clickable' : 'piano-cell';\n\n  return (\n    <span className={className} onClick={handleClick} >\n      {\n        cell.active &&\n        <span\n          onClick={handleClick}\n          className={\n            'cell-trigger cell-trigger-drummer ' +\n            `${playing ? 'playing' : ''} ` +\n            `${isDrummer ? 'current' : ''}`\n          }\n        />\n      }\n    </span>\n  );\n}\n\nexport default memo(Cell);","import React from 'react';\nimport { numSteps } from '../../redux/config-creators/compositionReducerConfig';\nimport { range } from 'lodash';\nimport { useSelector } from 'react-redux';\nimport './piano-roll.css';\nimport DrumCell from './DrumCell';\n\nconst DrumSequencer = ({ currentStep }) => {\n  const drumFiles = useSelector(state => state.drummer.files);\n  const currentCharacter = useSelector(state => state.character.character);\n\n  return (\n    <div className={`piano-roll drum-sequencer ${currentCharacter === 'drummer' ? 'drummer' : ''}`}>\n      {/* <div className='piano-roll-keys'>\n        {drumFiles.map((file, i) =>\n          <div\n            className='piano-key'\n            key={file.name}>\n            <p>{drumFiles[i].name}</p>\n          </div>\n        )}\n      </div> */}\n      <section className='piano-roll-editor'>\n        {\n          drumFiles.map((n, rowNum) =>\n            <section key={n.name} className={'step-row'}>\n              {\n                range(numSteps).map(colNum =>\n                  <DrumCell key={colNum} row={rowNum} col={colNum} playing={currentStep === colNum} />\n                )\n              }\n            </section>\n          )\n        }\n      </section>\n    </div>\n  );\n}\n\nexport default DrumSequencer;\n","import React, { useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport Dial from '../components/util/Dial.jsx';\nimport {\n  setReverb,\n  setLength,\n  setPhaser,\n  setVibratoDepth\n} from './lennyReducer';\n\nconst mapStateToProps = state => ({\n  reverb: state.lenny.reverb,\n  length: state.lenny.length,\n  phaser: state.lenny.phaser,\n  vibratoDepth: state.lenny.vibratoDepth,\n  currentCharacter: state.character.character\n});\n\nconst mapDispatchToProps = {\n  setReverb,\n  setLength,\n  setPhaser,\n  setVibratoDepth\n};\n\nconst LennySynth = ({\n  reverb,\n  setReverb,\n  length,\n  setLength,\n  phaser,\n  setPhaser,\n  vibratoDepth,\n  setVibratoDepth,\n  currentCharacter\n}) => {\n  const disabled = currentCharacter !== 'lenny';\n  return (\n    <div className={`lenny-synth synth ${disabled ? '' : 'current'} `}>\n      <h2>Synth</h2>\n      <div className='knob-row knob-row-vertical'>\n        <Dial\n          disabled={disabled}\n          value={length}\n          onChange={setLength} >\n          Length\n        </Dial>\n        <Dial\n          disabled={disabled}\n          value={reverb}\n          onChange={setReverb} >\n          Reverb\n        </Dial>\n        <input type='checkbox' checked={phaser} onChange={useCallback(e => setPhaser(e.target.checked), [setPhaser])} />\n        <Dial\n          disabled={disabled}\n          value={vibratoDepth}\n          onChange={setVibratoDepth} >\n          Vibrato\n          </Dial>\n      </div>\n    </div>\n  );\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LennySynth);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setFilterFreq } from './drummerReducer';\nimport Dial from '../components/util/Dial.jsx';\n\nconst mapStateToProps = state => ({\n  filterFreq: state.drummer.filterFreq,\n  currentCharacter: state.character.character\n});\n\nconst mapDispatchToProps = {\n  setFilterFreq\n}\n\nconst Drummer = ({\n  filterFreq,\n  setFilterFreq,\n  currentCharacter\n}) => {\n  const disabled = currentCharacter !== 'drummer';\n  return (\n    <div className={`drummer-synth synth ${disabled ? '' : 'current'} `}>\n      <h2>Drums</h2>\n      <div className='knob-row knob-row-horizontal'>\n        <Dial\n          value={filterFreq}\n          onChange={setFilterFreq}\n          disabled={disabled}>\n          Filter Freq\n        </Dial>\n      </div>\n    </div>\n  );\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Drummer);","import React, { useState, useEffect, useCallback } from 'react';\nimport BassSynth from '../BassSynth/BassSynth.jsx';\nimport PianoRoll from './piano-roll/PianoRoll.jsx';\nimport Tone from 'tone';\nimport './App.css';\nimport { octaveNotes } from '../util/notes-util';\nimport { sequencer } from '../index';\nimport { connect } from 'react-redux';\nimport DrumSequencer from './piano-roll/DrumSequencer.jsx';\nimport LennySynth from '../LennySynth/LennySynth';\nimport Drummer from '../Drummer/Drummer';\n\nconst mapStateToProps = state => ({\n  character: state.character.character\n});\n\nconst App = ({ character }) => {\n  const [isPlaying, setPlaying] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [tonic, setTonic] = useState(octaveNotes[0]);\n  const [scale, setScale] = useState('major');\n\n  const handlePlay = () => {\n    Tone.context.resume();\n    setPlaying(!isPlaying)\n  }\n\n  const handleTonicChange = useCallback(e => {\n    setTonic(e.target.value);\n  }, [setTonic]);\n\n  const handleScaleChange = useCallback(e => {\n    setScale(e.target.value);\n  }, [setScale]);\n\n  // runs once after first render\n  useEffect(() => {\n    // callback for sequencer\n    sequencer.onTick = step => {\n      setCurrentStep(step);\n    }\n  }, []);\n\n  return (\n    <main>\n      <section id='control-panel'>\n        <p>You are: {character}</p>\n        <button id='play-button'\n          onClick={handlePlay}\n        >\n          {isPlaying ? 'Stop' : 'Play'}\n        </button>\n        <select value={tonic} onChange={handleTonicChange}>\n          {\n            octaveNotes.map(note => <option key={note} value={note}>{note}</option>)\n          }\n        </select>\n        <select value={scale} onChange={handleScaleChange}>\n          <option value='Major'>Major</option>\n          <option value='Minor'>Minor</option>\n        </select>\n      </section>\n      <BassSynth />\n      <LennySynth />\n      <Drummer />\n      <section id='sequencer'>\n        <PianoRoll currentStep={currentStep} />\n        <DrumSequencer currentStep={currentStep}/>\n      </section>\n    </main>\n  );\n}\n\nexport default connect(\n  mapStateToProps,\n  null,\n)(App);","import Tone from 'tone';\n\nexport default class CSynth {\n  name = null;\n  constructor(name) {\n    if (!name) {\n      throw new Error('CSynth constructor requires a name');\n    }\n    this.name = name;\n    this.synth = new Tone.PolySynth(6, Tone.MonoSynth)\n      .chain(\n        new Tone.Limiter(),\n        Tone.Master\n      );\n    this.synth.set({\n      volume: -12,\n      oscillator: {\n        type: 'sawtooth'\n      },\n    });\n  }\n\n  triggerAttack = (frequency) => {\n    this.synth.triggerAttack(frequency);\n  }\n\n  triggerRelease = (frequency) => {\n    this.synth.triggerRelease(frequency);\n  }\n\n  triggerAttackRelease = (notes, length, time) => {\n    this.synth.triggerAttackRelease(notes, length, time);\n  }\n\n  setAmpAttack = (ratio) => {\n    this.synth.set({\n      envelope: {\n        attack: ratio + 0.01\n      }\n    });\n  }\n\n  setAmpDecay = (ratio) => {\n    this.synth.set({\n      envelope: {\n        decay: ratio + 0.01\n      }\n    });\n  }\n\n  setAmpSustain = (ratio) => {\n    this.synth.set({\n      envelope: {\n        sustain: ratio\n      }\n    });\n  }\n\n  setAmpRelease = (ratio) => {\n    this.synth.set({\n      envelope: {\n        release: (ratio * 10) + 0.01\n      }\n    });\n  }\n\n  setFilterAttack = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        attack: (ratio / 5) + 0.01\n      }\n    });\n  }\n\n  setFilterDecay = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        decay: ratio + 0.01\n      }\n    });\n  }\n\n  setFilterSustain = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        sustain: ratio\n      }\n    });\n  }\n\n  setFilterRelease = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        release: (ratio * 100) + 0.01\n      }\n    });\n  }\n\n  setFilterBase = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        baseFrequency: (ratio * 500) + 1\n      }\n    });\n  }\n\n  setFilterRange = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        octaves: ratio * 20\n      }\n    });\n  }\n\n  setFilterQ = (ratio) => {\n    this.synth.set({\n      filter: {\n        Q: ratio * 10\n      }\n    })\n  }\n}","import Tone from 'tone';\n\nexport default class BassSynthAudio {\n  name = null;\n  constructor(name) {\n    if (!name) {\n      throw new Error('CSynth constructor requires a name');\n    }\n    this.name = name;\n    this.synth = new Tone.PolySynth(1, Tone.MonoSynth)\n      .chain(\n        new Tone.Limiter(),\n        Tone.Master\n      );\n    this.synth.set({\n      volume: -12,\n      detune: -3200,\n      oscillator: {\n        type: 'sawtooth'\n      },\n      envelope: {\n        attack: 0.01,\n        sustain: 1,\n        decay: 0.05\n      },\n      filter: {\n        baseFrequency: 6,\n      },\n      filterEnvelope: {\n        sustain: 0.47415415352178325,\n      }\n    });\n  }\n\n  triggerAttack = (frequency) => {\n    this.synth.triggerAttack(frequency);\n  }\n\n  triggerRelease = (frequency) => {\n    this.synth.triggerRelease(frequency);\n  }\n\n  triggerAttackRelease = (notes, length, time) => {\n    this.synth.triggerAttackRelease(notes, length, time);\n  }\n\n  setLength = ratio => {\n    this.synth.set({\n      envelope: {\n        release: (ratio * 10) + 0.01\n      },\n      filterEnvelope: {\n        release: (ratio * 100) + 0.01\n      }\n    })\n  }\n\n  setShape = ratio => {\n    this.synth.set({\n      filterEnvelope: {\n        attack: (ratio / 5) + 0.01\n      }\n    });\n  }\n\n  setFilterDecay = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        decay: ratio + 0.01\n      }\n    });\n  }\n\n  setFilterRange = (ratio) => {\n    this.synth.set({\n      filterEnvelope: {\n        octaves: ratio * 20\n      }\n    });\n  }\n\n  setFilterQ = (ratio) => {\n    this.synth.set({\n      filter: {\n        Q: ratio * 10\n      }\n    })\n  }\n}","// import store from './store';\nimport watch from 'redux-watch';\nimport { get } from 'object-path';\n\n// use redux-watch to subscribe to a certain store value\n// and use the callback to set the initial value\nconst subscribe = (store, path, callback) => {\n  store.subscribe(watch(store.getState, path)(callback));\n  callback(get(store.getState(), path));\n}\n\nexport function subscribeCSynth(store, synth) {\n  const synthName = synth.name;\n  subscribe(store, `${synthName}.amp.attack`, synth.setAmpAttack);\n  subscribe(store, `${synthName}.amp.decay`, synth.setAmpDecay);\n  subscribe(store, `${synthName}.amp.sustain`, synth.setAmpSustain);\n  subscribe(store, `${synthName}.amp.release`, synth.setAmpRelease);\n\n  subscribe(store, `${synthName}.filter.attack`, synth.setFilterAttack);\n  subscribe(store, `${synthName}.filter.decay`, synth.setFilterDecay);\n  subscribe(store, `${synthName}.filter.sustain`, synth.setFilterSustain);\n  subscribe(store, `${synthName}.filter.release`, synth.setFilterRelease);\n  subscribe(store, `${synthName}.filter.base`, synth.setFilterBase);\n  subscribe(store, `${synthName}.filter.range`, synth.setFilterRange);\n  subscribe(store, `${synthName}.filter.q`, synth.setFilterQ);\n}\n\nexport function subscribeBassSynth(store, synth) {\n  const synthName = synth.name;\n  subscribe(store, `${synthName}.length`, synth.setLength)\n  subscribe(store, `${synthName}.shape`, synth.setShape);\n  subscribe(store, `${synthName}.filter.decay`, synth.setFilterDecay);\n  subscribe(store, `${synthName}.filter.range`, synth.setFilterRange);\n  subscribe(store, `${synthName}.filter.q`, synth.setFilterQ);\n}\n\nexport function subscribeLennySynth(store, synth) {\n  const synthName = synth.name;\n  subscribe(store, `${synthName}.reverb`, synth.setReverb);\n  subscribe(store, `${synthName}.length`, synth.setLength);\n  subscribe(store, `${synthName}.phaser`, synth.setPhaser);\n  subscribe(store, `${synthName}.vibratoDepth`, synth.setVibratoDepth);\n}\n\nexport function subscribeDrummer(store, synth) {\n  const synthName = synth.name;\n  subscribe(store, `${synthName}.filterFreq`, synth.setFilterFreq);\n}\n\n\n/**\n * TODO: Remove frequency information from composition and get \n * frequencies from key number so that notes/scales can be changed\n */\n\nexport function subscribeSequencer(store, sequencer) {\n  // subscribe each sequence to it's corresponding composition in the redux store\n  for (const [synthName, sequence] of Object.entries(sequencer.sequences)) {\n    const { composition } = store.getState()[synthName];\n    // subscribe to each cell in the matrix\n    for (const [rowi, row] of composition.entries()) {\n      for (const [coli, cell] of row.entries()) {\n        const path = String.raw`${synthName}.composition.${rowi}.${coli}.active`;\n        subscribe(store, path, active => {\n          const freq = synthName === 'drummer' ? String(cell.keyIndex) : cell.note.frequency;\n          if (active) {\n            sequence.addNote({ index: coli, freq });\n          } else {\n            sequence.removeNote({ index: coli, freq });\n          }\n        });\n      }\n    }\n  }\n}","import { createSlice } from 'redux-starter-kit';\n\nconst utilSlice = createSlice({\n  initialState: {\n    message: 'Hello, World',\n    startTime: null,\n    nextInterval: 0,\n  },\n  reducers: {\n    setMessage(state, action) {\n      console.log('change to ', action.payload);\n      state.message = action.payload;\n    },\n    setStartTime(state, action) {\n      state.startTime = action.payload;\n    },\n    setNextInterval(state, action) {\n      state.nextInterval = action.payload;\n    }\n  }\n});\n\nexport const { setMessage, setStartTime, setNextInterval } = utilSlice.actions;\nexport default utilSlice.reducer;","import { createSlice } from 'redux-starter-kit';\n\nconst characterSlice = createSlice({\n  initialState: {\n    character: null,\n  },\n  reducers: {\n    setCharacter(state, action) {\n      state.character = action.payload.character;\n    }\n  }\n});\n\nexport const { setCharacter } = characterSlice.actions;\nexport default characterSlice.reducer;","import { configureStore, getDefaultMiddleware } from 'redux-starter-kit';\nimport synth1Reducer from './reducers/synth1Reducer';\nimport bassReducer from '../BassSynth/bassReducer';\nimport lennyReducer from '../LennySynth/lennyReducer'\nimport drummerReducer from '../Drummer/drummerReducer';\nimport utilReducer from './reducers/utilReducer';\nimport characterReducer from './reducers/characterReducer';\n\nconst makeStore = (middleware = [], initialState) => {\n  return configureStore({\n    reducer: {\n      synth1: synth1Reducer,\n      bass: bassReducer,\n      lenny: lennyReducer,\n      drummer: drummerReducer,\n      util: utilReducer,\n      character: characterReducer,\n    },\n    middleware: [...getDefaultMiddleware(), ...middleware],\n    ...initialState && { preloadedState: initialState }\n  });\n};\n\nexport default makeStore;","import io from 'socket.io-client';\nimport makeStore from '../redux/store';\nimport { setCharacter } from '../redux/reducers/characterReducer';\nimport { sequencer } from '../index';\n\nconst blackList = [\n  'setCharacter',\n  'setNextInterval'\n]\n\nconst makeActionEmitter = socket => store => next => action => {\n  const result = next(action);\n  if (!(blackList.includes(action.type)) && !action.origin) {\n    socket.emit('action', { ...action, origin: socket.id });\n  }\n  return result;\n}\n\nexport const makeStoreWithSocket = async () => {\n  const socket = io(process.env.REACT_APP_SERVER_URI, { transports: ['websocket'] });\n\n  let character;\n  // wait for initial state from server before creating store\n  const initialState = await new Promise(resolve => {\n    socket.on('init', config => {\n      console.log(config);\n      console.log('You are player ', config.character);\n      character = config.character;\n      resolve(config.state);\n    });\n  });\n\n  const actionEmitter = makeActionEmitter(socket);\n  const store = makeStore([actionEmitter], initialState);\n\n  store.dispatch(setCharacter({ character }));\n\n  socket.on('action', action => {\n    store.dispatch(action);\n  });\n\n  socket.on('GET_STATE', (_, cb) => {\n    const { character, ...rest } = store.getState();\n    cb(rest);\n  });\n\n  socket.on('CHARACTER_CHANGE', ({ charactersById }) => {\n    const character = charactersById[socket.id];\n    store.dispatch(setCharacter({ character }))\n  });\n\n  return store;\n}\n","export default class Sequence {\n\n  chords = []\n  synth = null;\n  frequencyOffset = 0;\n\n  constructor(synth, numSteps) {\n    this.synth = synth;\n    this.chords = new Array(numSteps)\n      .fill(null).map(v => []);\n  }\n\n  getNotes(step) {\n    return this.chords[step] || [];\n    // let chord = this.chords[step] || [];\n    // return chord.map(note => note + this.frequencyOffset * 10);;\n  }\n\n  addNote = ({ index, freq }) => {\n    const chord = this.chords[index];\n    if (!chord.includes(freq)) {\n      chord.push(freq);\n    }\n  }\n\n  removeNote = ({ index, freq }) => {\n    this.chords[index] = this.chords[index].filter(value => value !== freq);\n  }\n\n}","import Tone from 'tone';\nimport Sequence from './Sequence';\n\nexport default class Sequencer {\n\n  step = 0;\n  numSteps = 0;\n  onTick = null;\n  loop = null;\n  sequences = {};\n\n  constructor({ bpm, numSteps }) {\n    this.numSteps = numSteps;\n    Tone.Transport.bpm.value = bpm;\n    Tone.Transport.start('+0.1');\n\n    this.loop = new Tone.Loop(this._loopCallback, '16n');\n    this.loop.humanize = true;\n  }\n\n  _loopCallback = (time) => {\n    // UI callback\n    this._onTick(time, this.step);\n    // trigger notes for each sequence\n    for (const seq of Object.values(this.sequences)) {\n      const nextChord = seq.getNotes(this.step)\n      nextChord.length > 0 &&\n        seq.synth.triggerAttackRelease(nextChord, '16n', time);\n    }\n    this.step++;\n    if (this.step >= this.numSteps) this.step = 0;\n  }\n\n  _onTick(time, step) {\n    if (step === 0 && this.onLoop) {\n      Tone.Draw.schedule(() => {\n        this.onLoop(Date.now());\n      }, time);\n    }\n    if (this.onTick) {\n      Tone.Draw.schedule(() => {\n        this.onTick(step);\n      }, time)\n    }\n  }\n\n  createSequence = (synth) => {\n    this.sequences[synth.name] = new Sequence(synth, this.numSteps);\n  }\n\n  start = () => {\n    Tone.context.resume();\n    this.loop.start();\n  }\n\n  stop = () => {\n    this.loop.stop();\n    this.step = 0;\n  }\n}","import Tone from 'tone';\nimport {mapRange} from '../util/util';\n\nexport default class LennySynthAudio {\n  name = null;\n  constructor(name) {\n    if (!name) {\n      throw new Error('CSynth constructor requires a name');\n    }\n    this.name = name;\n\n    this.reverb = new Tone.Freeverb();\n    this.vibrato = new Tone.Vibrato();\n    this.phaser = new Tone.Phaser({\n      frequency: 0.4,\n      octaves: 2,\n      baseFrequency: 200,\n      Q: 18,\n      stages: 20,\n    });\n    this.phaser.wet.value = 1;\n    this.synth = new Tone.PolySynth(6, Tone.MonoSynth)\n      .chain(\n        this.vibrato,\n        this.reverb,\n        this.phaser,\n        new Tone.Limiter(),\n        Tone.Master\n      );\n    this.synth.set({\n      volume: -12,\n      detune: -1200,\n      oscillator: {\n        type: 'triangle'\n      },\n      filterEnvelope: {\n        attack: 0.01,\n        decay: 1,\n        sustain: 1,\n      },\n      filter: {\n        Q: 0\n      }\n    });\n  }\n\n  triggerAttackRelease = (notes, length, time) => {\n    this.synth.triggerAttackRelease(notes, length, time);\n  }\n\n  setReverb = ratio => {\n    // this.reverb.decay = ratio * 8;\n    // this.reverb.wet.value = mapRange(ratio, 0, 1, 0.0, 0.9);\n    this.reverb.roomSize.value = mapRange(ratio, 0, 1, 0.2, 1);\n  }\n\n  setLength = ratio => {\n    this.synth.set({\n      envelope: {\n        release: (ratio * 8) + 0.01\n      },\n      filterEnvelope: {\n        release: (ratio * 80) + 0.01\n      }\n    });\n  }\n\n  setPhaser = state => {\n    if (state) {\n      this.phaser.wet.value = 1\n    } else {\n      this.phaser.wet.value = 0\n    }\n  }\n\n  setVibratoDepth = ratio => {\n    this.vibrato.depth.value = ratio;\n  }\n}\n","\nexport const mapRange = (x, in_min, in_max, out_min, out_max) => {\n  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\nexport const mapRatioToRange = (x, out_min, out_max) => {\n  const in_min = 0;\n  const in_max = 1;\n  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\n","import Tone from 'tone';\n// import { notes } from '../redux/config-creators/compositionReducerConfig';\nimport {mapRatioToRange} from '../util/util'\n\nexport default class DrummerAudio {\n  constructor(name, files) {\n    this.name = name;\n    // set up audio files\n    this.urls = files.reduce((acc, file) => {\n      acc[file.index] = file.path\n      return acc;\n    }, {})\n      // setup effects\n    this.filter = new Tone.Filter();\n\n    // create sampler\n    this.synth = new Tone.Players(this.urls)\n    .chain(\n      this.filter,\n      new Tone.Volume(-8),\n      new Tone.Limiter(),\n      Tone.Master\n    );\n  }\n\n  triggerAttackRelease = (notes, length, time) => {\n    // this.synth.triggerAttackRelease(notes, length, time);\n    notes.forEach(note => {\n      if (!this.urls[note]) return;\n      this.synth.get(note).restart(time);\n      this.synth.get(note).start(time);\n    });\n  }\n\n  setFilterFreq = ratio => {\n    // this.filter\n    this.filter.frequency.value = mapRatioToRange(Math.pow(ratio, 2), 0, 10000);\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport Tone from 'tone';\nimport { Provider } from 'react-redux';\nimport startAudioContext from 'startaudiocontext';\nimport CSynth from './audio/CSynth';\nimport BassSynthAudio from './BassSynth/BassSynthAudio';\nimport {\n  subscribeCSynth,\n  subscribeBassSynth,\n  subscribeSequencer,\n  subscribeLennySynth,\n  subscribeDrummer\n} from './redux/subscriptions'\nimport { numSteps } from './redux/config-creators/compositionReducerConfig';\nimport { setNextInterval } from './redux/reducers/utilReducer';\nimport { makeStoreWithSocket } from './socket/configureSocket';\nimport Sequencer from './audio/Sequencer';\nimport LennySynthAudio from './LennySynth/LennySynthAudio';\nimport DrummerAudio from './Drummer/DrummerAudio';\n\n\nconst bpm = 85;\nexport const sequencer = new Sequencer({ bpm, numSteps });\nconst oneMinute = 60000\nconst oneBeat = oneMinute / bpm\nconst intervalTime = oneBeat * numSteps;\n\n(async () => {\n\n  // setup web sockets to listen for and emit redux actions\n  // need to wait for initial state before creating the store\n  const store = await makeStoreWithSocket();\n\n  sequencer.onLoop = time => {\n    store.dispatch(setNextInterval(time + intervalTime));\n  }\n\n  const synth1 = new CSynth('synth1');\n  const bass = new BassSynthAudio('bass');\n  const lenny = new LennySynthAudio('lenny');\n  const drummer = new DrummerAudio('drummer', store.getState().drummer.files);\n\n  sequencer.createSequence(synth1);\n  sequencer.createSequence(bass);\n  sequencer.createSequence(lenny);\n  sequencer.createSequence(drummer);\n\n  subscribeCSynth(store, synth1);\n  subscribeBassSynth(store, bass);\n  subscribeLennySynth(store, lenny);\n  subscribeDrummer(store, drummer);\n\n  subscribeSequencer(store, sequencer);\n\n  // click needed to start audio context\n  document.getElementById('start-message').innerHTML = \"Please Click To Continue\"\n\n  // wait for audio context to start before rendering\n  await startAudioContext(Tone.context);\n\n  // find next interval to start at\n  const { nextInterval } = store.getState().util;\n  console.log(nextInterval)\n  if (nextInterval === 0) {\n    sequencer.start();\n  } else {\n    setTimeout(() => {\n      sequencer.start();\n    }, store.getState().util.nextInterval - Date.now())\n  }\n\n  // sequencer.start();\n\n  ReactDOM.render((\n    <Provider store={store}>\n      <App />\n    </Provider>\n  ), document.getElementById('root'));\n\n})();","module.exports = __webpack_public_path__ + \"static/media/kick_02.f5e08c6e.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare_01.16f25651.wav\";","module.exports = __webpack_public_path__ + \"static/media/rim_01.2369df53.wav\";","module.exports = __webpack_public_path__ + \"static/media/shaker_snap_01.689d3025.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap_01.f1089572.wav\";","module.exports = __webpack_public_path__ + \"static/media/short_cymbal_01.b55be721.wav\";","module.exports = __webpack_public_path__ + \"static/media/long_cymbal_01.7a357bf3.wav\";"],"sourceRoot":""}